cmake_minimum_required (VERSION 2.8.11)
project (Crane C CXX)

OPTION (BUILD_SHARED_LIBS "Build Shared Libraries" OFF)
OPTION (USE_JNA_DIRECTORIES "Use JNA friendly directory structure" OFF)
set(EXTRA_LIBS )
set(LIB_TYPE STATIC)
IF(BUILD_SHARED_LIBS)
	# User wants to build Dynamic Libraries, so change the LIB_TYPE variable to CMake keyword 'SHARED'
	SET (LIB_TYPE SHARED)
ENDIF(BUILD_SHARED_LIBS)

set(ASSUME_XDG TRUE)
set(LOD ${CMAKE_BINARY_DIR})

IF(${UNIX})
	IF(${APPLE})
		set(ASSUME_XDG FALSE)
		add_library(crane ${LIB_TYPE} src/crane.m)
		FIND_LIBRARY(FOUNDATION_LIBRARY Foundation)
		MARK_AS_ADVANCED(FOUNDATION_LIBRARY)
		SET(EXTRA_LIBS ${FOUNDATION_LIBRARY})
		IF(${BUILD_SHARED_LIBS} AND ${USE_JNA_DIRECTORIES})
			set(LOD "${LOD}/darwin")
		ENDIF()
	ELSEIF(${BUILD_SHARED_LIBS} AND ${USE_JNA_DIRECTORIES})
		EXECUTE_PROCESS(COMMAND uname -m COMMAND tr -d '\n' OUTPUT_VARIABLE ARCH)
		EXECUTE_PROCESS(COMMAND uname COMMAND tr -d '\n' OUTPUT_VARIABLE OS)
		IF(${OS} STREQUAL "Linux")
			set(OS "linux")
		ENDIF()
		IF((${ARCH} STREQUAL "x86_64") OR (${ARCH} STREQUAL "amd64"))
			set(${ARCH} "x86-64")
		ELSEIF(${ARCH} MATCHES "^i[0-9]86$")
			set(${ARCH} "x86")
		ENDIF()
		SET(LOD "${LOD}/${OS}-${ARCH}")
	ENDIF()
ELSEIF(${WIN32})
	# Cygwin can probably get away with the XDG/Unix code.
	set(ASSUME_XDG FALSE)
	add_library(crane ${LIB_TYPE} src/crane.cpp)
	SET_TARGET_PROPERTIES(crane PROPERTIES DEFINE_SYMBOL "_WINDOWS")
ELSE()
	message( WARNING "Unsupported operating system: ${CMAKE_SYSTEM_NAME}, will try compiling anyway, but it will likely fail - you should consider adding a platform layer if you're not using an XDG-compliant desktop manager") 
ENDIF()

IF(${ASSUME_XDG})
	add_library(crane ${LIB_TYPE} src/crane.cpp)
	SET_TARGET_PROPERTIES(crane PROPERTIES DEFINE_SYMBOL "XDG_UNIX")
ENDIF()
target_include_directories(crane PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_link_libraries(crane ${EXTRA_LIBS})
SET_TARGET_PROPERTIES(crane PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${LOD})
